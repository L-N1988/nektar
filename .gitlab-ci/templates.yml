stages:
  - build-env-default
  - build-env-full
  - build-and-test
  - compiler-warnings

.execution-conditions: &execution-conditions
  only:
    refs:
      - merge_requests
      - master
      - tags
    changes:
      - "**/*"
      - .dockerignore
      - .gitmodules
      - .gitlab-ci.yml
      - CMakeLists.txt
    variables:
      - $CI_MERGE_REQUEST_TITLE !~ /^WIP:.*/

.build-env-template: &build-env-template
  <<: *execution-conditions
  stage: build-env
  image: docker:19.03.6

.build-and-test-template: &build-and-test-template
  <<: *execution-conditions
  stage: build-and-test
  image: docker:19.03.6
  script:
    - OS_VERSION=$(echo $CI_JOB_NAME | cut -d- -f 1)
    - BUILD_TYPE=$(echo $CI_JOB_NAME | cut -d- -f 2)
    - export CCACHE_DIR=/cache/nektar/$OS_VERSION/
    - export NUM_CPUS=3
    - export CONTAINER_NAME=test-$CI_JOB_ID
    - export ENV_NAME=env-${OS_VERSION}-${BUILD_TYPE}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$ENV_NAME
    - sed "s %%BASE_IMAGE%% $CI_REGISTRY_IMAGE:$ENV_NAME g" .gitlab-ci/Dockerfile_add_repo > Dockerfile_tmp
    - export ENV_IMAGE=$(docker build -q -f Dockerfile_tmp .)
    - mkdir -p log
    - docker run --name $CONTAINER_NAME -v ccache:/cache
      -e "BUILD_TYPE=$BUILD_TYPE"
      -e "NUM_CPUS=$NUM_CPUS"
      -e "CCACHE_DIR=$CCACHE_DIR"
      $ENV_IMAGE
      bash -x .gitlab-ci/build-and-test.sh |
      tee log/${OS_VERSION}_${BUILD_TYPE}.log || true
    - exit_code=$(docker wait $CONTAINER_NAME)
    - >
        echo "Container exit code: $exit_code"
    - if [ $exit_code -ne 0 ];
      then
        export FAIL_IMAGE=$CI_REGISTRY_IMAGE:pipeline_${CI_PIPELINE_ID}_${OS_VERSION}_${BUILD_TYPE};
        echo FAIL $FAIL_IMAGE;
        docker commit $CONTAINER_NAME $FAIL_IMAGE;
        docker push $FAIL_IMAGE; 
        docker rmi $FAIL_IMAGE;
      fi
    - docker rm $CONTAINER_NAME
    - exit $exit_code;
  artifacts:
    paths:
      - log/

.compiler-warning-template: &compiler-warning-template
  <<: *execution-conditions
  stage: compiler-warnings
  variables:
    WARNING_REGEX: '.*warning[: ].*'
    GIT_STRATEGY: none
  script:
    - export OS=$(echo $CI_JOB_NAME | cut -d- -f 1)
    - export BUILD_TYPE=$(echo $CI_JOB_NAME | cut -d- -f 2)
    - export LOG_FILE="log/${OS}_${BUILD_TYPE}.log"
    - if [ $(grep -c "$WARNING_REGEX" $LOG_FILE) -ne 0 ];
      then
      grep --colour=always -A 1 -B 1 -0 "$WARNING_REGEX" $LOG_FILE;
        exit 1;
      fi
  allow_failure: true

