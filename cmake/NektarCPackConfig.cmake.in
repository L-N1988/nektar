if(CPACK_GENERATOR STREQUAL "DEB")
    # Debian packages
    execute_process(COMMAND dpkg --print-architecture 
        OUTPUT_VARIABLE CPACK_DEBIAN_PACKAGE_ARCHITECTURE
        OUTPUT_STRIP_TRAILING_WHITESPACE)
    set(ARCHITECTURE ${CPACK_DEBIAN_PACKAGE_ARCHITECTURE})
elseif(CPACK_GENERATOR STREQUAL "RPM")
    execute_process(COMMAND rpm --eval %{_arch}
                OUTPUT_VARIABLE CPACK_RPM_PACKAGE_ARCHITECTURE
                OUTPUT_STRIP_TRAILING_WHITESPACE)
    set(ARCHITECTURE ${CPACK_RPM_PACKAGE_ARCHITECTURE})

    set(CPACK_PACKAGE_FILE_NAME
        "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-1.${CPACK_RPM_PACKAGE_ARCHITECTURE}")
elseif(CPACK_GENERATOR STREQUAL "PackageMaker")
    # OS X .pkg installer -- set install location
    set(CPACK_PACKAGE_DEFAULT_LOCATION "/")
    set(CPACK_PACKAGING_INSTALL_PREFIX "/opt/nektar++")
    set(CPACK_RESOURCE_FILE_WELCOME "@CMAKE_SOURCE_DIR@/pkg/osx-installer.html")
    set(CPACK_POSTFLIGHT_SCRIPT "@CMAKE_SOURCE_DIR@/pkg/osx-postflight.sh")

    # This is used as part of the identifier, so make it without spaces
    set(CPACK_PACKAGE_VENDOR "imperialcollegelondon")
endif()

# Determine architecture if not detected by rpm/dpkg above
if(NOT DEFINED ARCHITECTURE)
    execute_process(COMMAND uname -m 
        OUTPUT_VARIABLE ARCHITECTURE
        OUTPUT_STRIP_TRAILING_WHITESPACE)
endif()

# Override the output filename to comply with Debian naming policy
if(NOT DEFINED CPACK_PACKAGE_FILE_NAME)
    set(CPACK_PACKAGE_FILE_NAME
        "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${ARCHITECTURE}")
endif()

# This lovely block of code is designed to patch up our executables ready for OS
# X deployment. The strategy is to create a piece of INSTALL code that will
# patch up each executable and copy any libraries that we depend on, so that
# things like ARPACK can be compiled using MacPorts/Homebrew and we don't have
# to bother messing around compiling them ourselves.
#
# The strategy is:
#
# - Examine the library dependencies using the get_prerequisites function from
#   the GetPrerequisites CMake module (that essentially runs otool recursively)
# - Copy each of the libraries into dist/lib
# - Run install_name_tool on each library to remove the absolute path to the
#   installed library.
# - This is then replaced by @rpath/../lib/libName.dylib so that @rpath can be
#   embedded into the executable.
# - Change the library install name so that it follows the same convention
# - Extract the rpaths from our executable using the get_item_rpaths function
#   from BundleUtilities
# - Finally, set the rpath of each executable to be @executable_path so that
#   everything becomes relative to the executable
#
# All of this makes an entirely self-contained version of Nektar++ that can be
# extracted anywhere on the system and still retain its dependencies.
# if(APPLE)
#     foreach(app ${INSTALL_BINS_FILES})
#         get_filename_component(appname ${app} NAME)
#         set(app "\${CMAKE_INSTALL_PREFIX}/bin/${appname}")
#         install(CODE "
#         include(GetPrerequisites)
#         include(BundleUtilities)

#         get_filename_component(exepath ${app} DIRECTORY)
#         get_prerequisites(\"${app}\" prereqs 1 1 \"\${exepath}\" \"\" \"\" 1)

#         message(STATUS \"Fixing executable: ${app}\")

#         # First pass -- copy libraries and figure out -change command for
#         # install_name_tool. Note that since install_name_tool doesn't complain
#         # if the thing you're changing isn't there, we just throw everything
#         # at every library.
#         unset(changes)
#         unset(changes_lib)
#         foreach(req \${prereqs})
#             get_filename_component(reqname \${req} NAME)
#             set(libdest \${CMAKE_INSTALL_PREFIX}/lib/\${reqname})
#             set(changes \${changes} \"-change\" \"\${req}\" \"@executable_path/../lib/\${reqname}\")
#             set(changes_lib \${changes_lib} \"-change\" \"\${req}\" \"@loader_path/../lib/\${reqname}\")

#             # Copy this library
#             if (NOT EXISTS \${libdest})
#                 file(COPY \${req}
#                      DESTINATION \${CMAKE_INSTALL_PREFIX}/lib
#                      FILE_PERMISSIONS OWNER_WRITE OWNER_READ)

#                 # If the library was symlinked, we follow the symlink and then 
#                 # copy that, too.
#                 if (IS_SYMLINK \${req})
#                     # resolve symlink
#                     get_filename_component(req_abs \${req} REALPATH)
#                     file(COPY \${req_abs}
#                          DESTINATION \${CMAKE_INSTALL_PREFIX}/lib
#                          FILE_PERMISSIONS OWNER_WRITE OWNER_READ)
#                 endif()
#             endif()
#         endforeach()

#         # Second pass -- fix up library to use @loader_path/../lib/libName.dylib
#         foreach(req \${prereqs})
#             set(searchname \${req})

#             if (IS_SYMLINK \${req})
#                 get_filename_component(req_abs \${req} REALPATH)
#                 set(req \${req_abs})
#             endif()

#             get_filename_component(reqname \${req} NAME)
#             set(libdest \${CMAKE_INSTALL_PREFIX}/lib/\${reqname})
#             set(cmd install_name_tool \${changes_lib} \"\${libdest}\")
#             execute_process(COMMAND \${cmd} RESULT_VARIABLE install_name_tool_result)

#             # change library install name ID
#             execute_process(COMMAND install_name_tool -id @loader_path/../lib/\${reqname} \${libdest})

#             # change @loader_path (used by some boost libs through homebrew)
#         endforeach()

#         # Third pass -- fix executable library names
#         foreach(req \${prereqs})
#             set(cmd install_name_tool \${changes} \"${app}\")
#             execute_process(COMMAND \${cmd} RESULT_VARIABLE install_name_tool_result)
#         endforeach()

#         # Fix rpath -- unset variables that have been used on previous passes
#         unset(app_rpaths)
#         get_item_rpaths(\"${app}\" app_rpaths)
#         unset(app_rpaths_unique)
#         unset(rpath_changes)
#         foreach(rpath \${app_rpaths})
#             gp_append_unique (app_rpaths_unique \${rpath})
#         endforeach()
#         foreach(rpath \${app_rpaths_unique})
#             set(rpath_changes \${rpath_changes} -delete_rpath \${rpath})
#         endforeach()
#         set(rpath_changes \${rpath_changes} -add_rpath @executable_path)
#         execute_process(COMMAND install_name_tool \${rpath_changes} \"${app}\")
#         ")
#     ENDFOREACH()
# endif()
