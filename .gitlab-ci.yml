stages:
  - build-env-default
  - build-env-full
  - build-and-test
  - build-docs
  - publish

.build-env-template: &build-env-template
  stage: build-env
  tags:
    - shell
  only:
    refs:
      - registry
      - tags

.build-and-test-template: &build-and-test-template
  stage: build-and-test
  tags:
    - shell
  only:
    refs:
      - registry
      - tags
  script:
    - IFS="-" read _ _ _ OS_VERSION BUILD_TYPE <<<$CI_JOB_NAME
    - export CCACHE_DIR=/cache/nektar/$OS_VERSION/
    - export NUM_CPUS=2
    - export CONTAINER_NAME=test-$CI_JOB_ID
    - export ENV_NAME=env-${OS_VERSION}-${BUILD_TYPE}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$ENV_NAME
    - sed "s %%BASE_IMAGE%% $CI_REGISTRY_IMAGE:$ENV_NAME g" .gitlab-ci/Dockerfile_add_repo > Dockerfile_tmp
    - export ENV_IMAGE=$(docker build -q -f Dockerfile_tmp .)
    - docker run --name $CONTAINER_NAME -v ccache:/cache
      -e "BUILD_TYPE=$BUILD_TYPE"
      -e "NUM_CPUS=$NUM_CPUS"
      -e "CCACHE_DIR=$CCACHE_DIR"
      $ENV_IMAGE
      bash -x .gitlab-ci/build-and-test.sh || true
    - exit_code=$(docker wait $CONTAINER_NAME)
    - >
        echo "Container exit code: $exit_code"
    - if [ $exit_code -ne 0 ];
      then
        export FAIL_IMAGE=$CI_REGISTRY_IMAGE:pipeline_${CI_PIPELINE_ID}_${OS_VERSION}_${BUILD_TYPE};
        echo FAIL $FAIL_IMAGE;
        docker commit $CONTAINER_NAME $FAIL_IMAGE;
        docker push $FAIL_IMAGE; 
        docker rmi $FAIL_IMAGE;
      fi
    - docker rm $CONTAINER_NAME
    - docker rmi $ENV_IMAGE
    - exit $exit_code;


################################################
###################  DEBIAN  ###################
################################################

.build-env-debian-template-default: &build-env-debian-template-default
  <<: *build-env-template
  stage:
    build-env-default
  variables:
    OS_DISTRO: debian
  script:
    - IFS=- read _ _ OS_VERSION _ <<<$CI_JOB_NAME
    - IFS=- read _ _ BUILD_TYPE <<<$CI_JOB_STAGE
    - sed  -e "s %%OS_VERSION%% $OS_VERSION g" -e "s %%REGISTRY%% $CI_REGISTRY_IMAGE g" docker/nektar-env/Dockerfile_${OS_DISTRO}_${BUILD_TYPE} > Dockerfile
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export IMAGE=$CI_REGISTRY_IMAGE:env-${OS_VERSION}-${BUILD_TYPE}
    - docker build --pull -t $IMAGE .
    - docker push $IMAGE

.build-env-debian-template-full: &build-env-debian-template-full
  <<: *build-env-debian-template-default
  stage:
    build-env-full

build-env-buster-default:
  <<: *build-env-debian-template-default

build-env-buster-full:
  <<: *build-env-debian-template-full

# build-env-stretch-default:
#   <<: *build-env-debian-template-default

# build-env-stretch-full:
#   <<: *build-env-debian-template-full


build-and-test-buster-default:
  <<: *build-and-test-template
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE:env-buster-default
  # image: $CI_REGISTRY_IMAGE:env-buster-default

build-and-test-buster-full:
  <<: *build-and-test-template
  image: nektar-env:buster-full
  variables:
    OS_DISTRO: debian
    GIT_SUBMODULE_STRATEGY: recursive

# build-and-test-stretch-default:
#   <<: *build-and-test-template
#   image: nektar-env:stretch-default

# build-and-test-stretch-full:
#   <<: *build-and-test-template
#   image: nektar-env:stretch-full


# build-env-buster-documentation:
#   tags:
#     - shell
#   stage:
#     build-env-full
#   script:
#     - docker build -t nektar-env:buster-documentation -f docker/nektar-env/Dockerfile_debian_documentation .

# build-user-guide:
#   <<: *build-and-test-template
#   image: nektar-env:buster-documentation
#   script:
#     - cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=Release -DNEKTAR_BUILD_LIBRARY:BOOL=OFF -DNEKTAR_BUILD_SOLVERS:BOOL=OFF -DNEKTAR_BUILD_UTILITIES:BOOL=OFF -DNEKTAR_BUILD_TESTS:BOOL=OFF -DNEKTAR_BUILD_DOC:BOOL=ON .
#     - make -C build user-guide-pdf user-guide-html developer-guide-pdf developer-guide-html

# build-doxygen:
#   <<: *build-and-test-template
#   image: nektar-env:buster-documentation
#   script:
#     - cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=Release -DNEKTAR_BUILD_LIBRARY:BOOL=OFF -DNEKTAR_BUILD_SOLVERS:BOOL=OFF -DNEKTAR_BUILD_UTILITIES:BOOL=OFF -DNEKTAR_BUILD_TESTS:BOOL=OFF -DNEKTAR_BUILD_DOC:BOOL=ON .
#     - make -C build doc

# build-tutorials:
#   <<: *build-and-test-template
#   image: nektar-env:buster-documentation
#   variables:
#     GIT_SUBMODULE_STRATEGY: recursive
#   script:
#     - cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=Release .
#     - make -C build -j 2 tutorials-pdf tutorials-html

# ################################################
# ###################  UBUNTU  ###################
# ################################################

# .build-env-ubuntu-template-default: &build-env-ubuntu-template-default
#   <<: *build-env-debian-template-default
#   variables:
#     OS_DISTRO: ubuntu

# .build-env-ubuntu-template-full: &build-env-ubuntu-template-full
#   <<: *build-env-ubuntu-template-default
#   stage:
#     build-env-full
    
# build-env-bionic-default:
#   <<: *build-env-ubuntu-template-default

# build-env-bionic-full:
#   <<: *build-env-ubuntu-template-full

# build-env-xenial-default:
#   <<: *build-env-ubuntu-template-default

# build-env-xenial-full:
#   <<: *build-env-ubuntu-template-full

# build-env-trusty-default:
#   <<: *build-env-ubuntu-template-default

# build-env-trusty-full:
#   <<: *build-env-ubuntu-template-full


# build-and-test-bionic-default:
#   <<: *build-and-test-template
#   image: nektar-env:bionic-default

# build-and-test-bionic-full:
#   <<: *build-and-test-template
#   image: nektar-env:bionic-full

# build-and-test-xenial-default:
#   <<: *build-and-test-template
#   image: nektar-env:xenial-default

# build-and-test-xenial-full:
#   <<: *build-and-test-template
#   image: nektar-env:xenial-full

# build-and-test-trusty-default:
#   <<: *build-and-test-template
#   image: nektar-env:trusty-default

# build-and-test-trusty-full:
#   <<: *build-and-test-template
#   image: nektar-env:trusty-full


# ################################################
# ###################  CENTOS  ###################
# ################################################

# .build-env-centos-template-default: &build-env-centos-template-default
#   <<: *build-env-debian-template-default
#   variables:
#     OS_DISTRO: centos

# .build-env-centos-template-full: &build-env-centos-template-full
#   <<: *build-env-centos-template-default
#   stage:
#     build-env-full

# build-env-centos7-default:
#   <<: *build-env-centos-template-default

# build-env-centos7-full:
#   <<: *build-env-centos-template-full

# build-and-test-centos7-default:
#   <<: *build-and-test-template
#   image: nektar-env:centos7-default

# build-and-test-centos7-full:
#   <<: *build-and-test-template
#   image: nektar-env:centos7-full
