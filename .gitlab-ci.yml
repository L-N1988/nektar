stages:
  - docker-build-env
  - docker-build
  - docker-test
  - publish

docker-build-env:
  stage: docker-build-env
  variables:
    dockerfile: docker/nektar-env/Dockerfile
    image_name: nektar-env
  tags:
    - shell
  only:
    refs:
      - feature/gitlab_ci
      - /^docker\/.*$/
      - tags
  script:
    - docker build --cpu-period 100000 --cpu-quota 200000 -t ${image_name} -f ${dockerfile} .

docker-build:
  stage: docker-build
  image: nektar-env
  tags:
    - docker
  only:
    refs:
      - feature/gitlab_ci
      - /^docker\/.*$/
      - tags
  script:
    - mkdir ~/.ccache && echo "cache_dir = /cache/nektar" >> ~/.ccache/ccache.conf
    - mkdir build && (cd build &&
      cmake
      -DCMAKE_BUILD_TYPE:STRING=Debug
      -DNEKTAR_FULL_DEBUG:BOOL=ON
      -DNEKTAR_TEST_ALL:BOOL=ON
      -DNEKTAR_BUILD_TIMINGS:BOOL=ON
      -DNEKTAR_USE_ARPACK:BOOL=ON
      -DNEKTAR_USE_FFTW:BOOL=ON
      -DNEKTAR_USE_MPI:BOOL=ON
      -DNEKTAR_USE_SCOTCH:BOOL=ON
      -DNEKTAR_USE_PETSC:BOOL=ON
      -DNEKTAR_USE_HDF5:BOOL=ON
      -DNEKTAR_USE_MESHGEN:BOOL=ON
      -DNEKTAR_USE_CCM:BOOL=ON
      -DNEKTAR_BUILD_PYTHON:BOOL=ON
      -DNEKTAR_TEST_USE_HOSTFILE=ON
      -DNEKTAR_ERROR_ON_WARNINGS=OFF
      .. &&
      make -j 2 all; make -j 2 install)
    - tar -czf build.tar.gz --exclude="*.o" build
  artifacts:
    paths:
      - build.tar.gz

docker-test:
  stage: docker-test
  image: nektar-env
  tags:
    - docker
  dependencies:
    - docker-build
  script:
    - tar xf build.tar.gz
    - cd build
    - for i in $(find $(pwd)/library/ -maxdepth 1 -mindepth 1 -type d); do export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$i; done
    - ctest -j 2

publish:
  image: debian:buster-slim
  stage: publish
  tags:
    - docker
  variables:
    GIT_STRATEGY: none 
  only:
    refs:
      - master
      - tags
  dependencies:
    - docker-build
  script:
    - mv build.tar.gz ${CI_COMMIT_TAG}-build.tar.gz
    # - # scp to a web server somewhere
