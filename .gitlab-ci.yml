workflow:
  rules:
    # Run pipeline on tags for the main project
    - if: $CI_COMMIT_TAG && $CI_PROJECT_PATH == "nektar/nektar"
    # Run pipeline on the default branch for the main project
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PROJECT_PATH == "nektar/nektar"
    # DO NOT run pipeline if WIP
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /^WIP:.*/
      when: never
    # DO NOT run pipeline if Draft
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /^Draft:.*/ 
      when: never
    # Other merge requests trigger pipelines
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # Manual runs
    - if: $CI_PIPELINE_SOURCE == "web"

stages:
  - build-env-default
  - build-env-full
  - build-and-test
  - quality-checks
  - package-env
  - package-build
  - package-test
  - package-deploy-dev
  - package-deploy
  - cleanup

include:
  - local: .gitlab-ci/packaging.yml

.execution-conditions: &execution-conditions
  only:
    refs:
      - merge_requests
      - master@nektar/nektar
      - tags@nektar/nektar
      - web
    changes:
      - "cmake/**/*"
      - "docker/**/*"
      - "docs/**/*"
      - "library/**/*"
      - "solvers/**/*"
      - "tests/**/*"
      - "utilities/**/*"
      - ".gitlab-ci/*"
      - .dockerignore
      - .gitmodules
      - .gitlab-ci.yml
      - CMakeLists.txt
  except:
    refs:
      - /^pkg\/.*$/

.build-env-template: &build-env-template
  <<: *execution-conditions
  stage: build-env
  image: docker:19.03.6
  timeout: 1h
  variables:
    REMOVE_UCX: 0
    PIP_FLAGS: ""
  script:
    - OS_DISTRO=$(echo $CI_JOB_NAME | cut -d- -f 1)
    - OS_VERSION=$(echo $CI_JOB_NAME | cut -d- -f 2)
    - BUILD_TYPE=$(echo $CI_JOB_NAME | cut -d- -f 3)
    - sed -e "s %%OS_DISTRO%% $OS_DISTRO g" -e "s %%OS_VERSION%% $OS_VERSION g" -e "s %%REGISTRY%% $CI_REGISTRY_IMAGE g" docker/nektar-env/Dockerfile_${OS_DISTRO}_${BUILD_TYPE} > Dockerfile
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export IMAGE=$CI_REGISTRY_IMAGE:env-${OS_DISTRO}-${OS_VERSION}-${BUILD_TYPE}
    - docker pull $IMAGE || true
    - docker build --pull --build-arg REMOVE_UCX=${REMOVE_UCX} --build-arg PIP_FLAGS=${PIP_FLAGS} -t $IMAGE .
    - docker push $IMAGE

.build-and-test-template: &build-and-test-template
  <<: *execution-conditions
  stage: build-and-test
  image: docker:19.03.6
  variables:
    GIT_STRATEGY: clone
  script:
    - OS_DISTRO=$(echo $CI_JOB_NAME | cut -d- -f 1)
    - OS_VERSION=$(echo $CI_JOB_NAME | cut -d- -f 2)
    - BUILD_TYPE=$(echo $CI_JOB_NAME | cut -d- -f 3)
    - export CCACHE_DIR=/cache/nektar/$OS_VERSION/
    - export NUM_CPUS=8
    - export CONTAINER_NAME=test-$CI_JOB_ID
    - export ENV_NAME=env-${OS_DISTRO}-${OS_VERSION}-${BUILD_TYPE}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$ENV_NAME
    - sed "s %%BASE_IMAGE%% $CI_REGISTRY_IMAGE:$ENV_NAME g" .gitlab-ci/Dockerfile_add_repo > Dockerfile_tmp
    - export ENV_IMAGE=$(docker build -q -f Dockerfile_tmp .)
    - mkdir -p log
    - if [ ! -d $CCACHE_DIR ]; then mkdir -p $CCACHE_DIR && chown 1000:1000 $CCACHE_DIR; fi
    - docker run --name $CONTAINER_NAME -v ccache:/cache
      --shm-size=4g
      -h "${CI_RUNNER_ID}.${CI_JOB_NAME}"
      -e "BUILD_TYPE=$BUILD_TYPE"
      -e "BUILD_SIMD=$BUILD_SIMD"
      -e "BUILD_CC=$BUILD_CC"
      -e "BUILD_CXX=$BUILD_CXX"
      -e "BUILD_FC=$BUILD_FC"
      -e "DISABLE_CWIPI=$DISABLE_CWIPI"
      -e "DISABLE_MCA=$DISABLE_MCA"
      -e "DO_COVERAGE=$DO_COVERAGE"
      -e "NUM_CPUS=$NUM_CPUS"
      -e "CCACHE_DIR=$CCACHE_DIR"
      -e "LD_PRELOAD=$LD_PRELOAD"
      -e "PYTHON_EXECUTABLE=$PYTHON_EXECUTABLE"
      $ENV_IMAGE
      bash -x .gitlab-ci/build-and-test.sh |
      tee log/${OS_VERSION}_${BUILD_TYPE}.log || true
    - exit_code=$(docker wait $CONTAINER_NAME)
    - >
        echo "Container exit code: $exit_code"
    - if [[ $DO_COVERAGE != "" ]]; then docker cp ${CONTAINER_NAME}:/home/nektar/nektar/coverage coverage; fi
    - if [ $exit_code -ne 0 ];
      then
        export FAIL_IMAGE=$CI_REGISTRY_IMAGE:pipeline_${CI_PIPELINE_ID}_${OS_VERSION}_${BUILD_TYPE};
        echo FAIL $FAIL_IMAGE;
        docker commit $CONTAINER_NAME $FAIL_IMAGE;
        docker push $FAIL_IMAGE; 
        docker rmi $FAIL_IMAGE;
      fi
    - docker rm $CONTAINER_NAME
    - exit $exit_code;
  artifacts:
    expire_in: 14 days
    paths:
      - log/
  timeout: 3h

.compiler-warning-template: &compiler-warning-template
  <<: *execution-conditions
  image: debian:10-slim
  stage: quality-checks
  variables:
    WARNING_REGEX: '.*warning[: ].*'
    GIT_STRATEGY: none
  script:
    - export OS=$(echo $CI_JOB_NAME | cut -d- -f 2)
    - export BUILD_TYPE=$(echo $CI_JOB_NAME | cut -d- -f 3)
    - export LOG_FILE="log/${OS}_${BUILD_TYPE}.log"
    - if [ $(grep -c "$WARNING_REGEX" $LOG_FILE) -ne 0 ];
      then
      grep --colour=always -A 1 -B 1 -0 "$WARNING_REGEX" $LOG_FILE;
        exit 1;
      fi
  timeout: 15m

.clang-format-template: &clang-format-template
  <<: *execution-conditions
  image: debian:12-slim
  stage: quality-checks
  variables:
    CL_F_VER: 16
    TARGETS: library solvers templates tests utilities
  before_script:
    - apt-get update && apt-get install -y clang-format-$CL_F_VER git-core
  script:
    - cd "$CI_PROJECT_DIR"
    - find $TARGETS -iname "*.cpp" -o -iname "*.cpp.in" -o -iname "*.h" -o -iname "*.hpp" |
      xargs clang-format-$CL_F_VER --dry-run -Werror
  timeout: 15m

.clang-tidy-template: &clang-tidy-template
  <<: *execution-conditions
  stage: quality-checks
  variables:
    NUM_CPUS: 8
    CL_T_VER: 16
    CL_F_VER: 16
    TARGETS: library solvers templates tests utilities
  before_script:
    - git config --global --add safe.directory "$CI_PROJECT_DIR"
  script:
    - cd "$CI_PROJECT_DIR"
    - EXPORT_COMPILE_COMMANDS=1 BUILD_TYPE=full bash -x .gitlab-ci/build-and-test.sh
    - run-clang-tidy-$CL_T_VER -p build -header-filter='(library|solver|tests)' -j$NUM_CPUS -fix -clang-tidy-binary=clang-tidy-$CL_T_VER -clang-apply-replacements-binary=clang-apply-replacements-$CL_T_VER
    - find $TARGETS -iname "*.cpp" -o -iname "*.h" -o -iname "*.hpp" | xargs clang-format-$CL_F_VER -i
    - git diff > clang-tidy.diff
    - if [ -s clang-tidy.diff ]; then echo "Found changes in clang-tidy"; exit 1; fi
  timeout: 1h
  artifacts:
    expire_in: 14 days
    when: on_failure
    paths:
      - clang-tidy.diff
  
.header-format-template: &header-format-template
  <<: *execution-conditions
  image: debian:11-slim
  stage: quality-checks
  variables:
    TARGETS: library solvers templates tests utilities
  script:
    - cd "$CI_PROJECT_DIR"
    - source .gitlab-ci/header-format-filename.sh
    - source .gitlab-ci/header-format-license.sh
  timeout: 15m

.xml-format-template: &xml-format-template
  <<: *execution-conditions
  image: debian:11-slim
  stage: quality-checks
  variables:
    GIT_STRATEGY: clone
  before_script:
    - apt-get update && apt-get install -y dos2unix
  script:
    - cd "$CI_PROJECT_DIR"
    - .gitlab-ci/checkformatXMLfile.sh
  timeout: 15m

.uncompiled-files-template: &uncompiled-files-template
  <<: *execution-conditions
  stage: quality-checks
  script:
    - cd "$CI_PROJECT_DIR"
    - EXPORT_COMPILE_COMMANDS=1 BUILD_TYPE=full bash -x .gitlab-ci/build-and-test.sh
    - python3 .gitlab-ci/check-compiled-files.py build/compile_commands.json
  timeout: 15m

################################################
###################  DEBIAN  ###################
################################################

.build-env-debian-template-default: &build-env-debian-template-default
  <<: *build-env-template
  stage: build-env-default

.build-env-debian-template-performance: &build-env-debian-template-performance
  <<: *build-env-debian-template-default

.build-env-debian-template-full: &build-env-debian-template-full
  <<: *build-env-debian-template-default
  stage: build-env-full

debian-bookworm-default-build-env:
  <<: *build-env-debian-template-default

debian-bookworm-full-build-env:
  <<: *build-env-debian-template-full
  needs: ["debian-bookworm-default-build-env"]
  variables:
    PIP_FLAGS: "--break-system-packages"

debian-bullseye-default-build-env:
  <<: *build-env-debian-template-default

debian-bullseye-full-build-env:
  <<: *build-env-debian-template-full
  variables:
    REMOVE_UCX: 1
  needs: ["debian-bullseye-default-build-env"]

debian-bullseye-performance-build-env:
  <<: *build-env-debian-template-performance
  tags:
    - perf

debian-bookworm-default-build-and-test:
  <<: *build-and-test-template
  needs: ["debian-bookworm-default-build-env"]

debian-bookworm-full-build-and-test:
  <<: *build-and-test-template
  needs: ["debian-bookworm-full-build-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: recursive

debian-bookworm-full-avx2-build-and-test:
  <<: *build-and-test-template
  needs: ["debian-bookworm-full-build-env"]
  variables:
    BUILD_SIMD: avx2
  tags:
    - avx2

debian-bookworm-full-avx512-build-and-test:
  <<: *build-and-test-template
  needs: ["debian-bookworm-full-build-env"]
  variables:
    BUILD_SIMD: avx512
  tags:
    - avx512

debian-bookworm-full-clang15-build-and-test:
  <<: *build-and-test-template
  needs: ["debian-bookworm-full-build-env"]
  variables:
    BUILD_CC: clang-15
    BUILD_CXX: clang++-15

debian-bullseye-default-build-and-test:
  <<: *build-and-test-template
  needs: ["debian-bullseye-default-build-env"]

debian-bullseye-performance-build-and-test:
  <<: *build-and-test-template
  stage: build-and-test
  needs: ["debian-bullseye-performance-build-env"]
  tags:
    - perf
  timeout: 1h
  allow_failure: true

debian-bullseye-full-build-and-test:
  <<: *build-and-test-template
  needs: ["debian-bullseye-full-build-env"]

debian-bullseye-full-avx2-build-and-test:
  <<: *build-and-test-template
  needs: ["debian-bullseye-full-build-env"]
  variables:
    BUILD_SIMD: avx2
  tags:
    - avx2

debian-bullseye-full-avx512-build-and-test:
  <<: *build-and-test-template
  needs: ["debian-bullseye-full-build-env"]
  variables:
    BUILD_SIMD: avx512
  tags:
    - avx512

# COMPILER WARNINGS
debian-bookworm-default-warnings:
  <<: *compiler-warning-template
  needs: ["debian-bookworm-default-build-and-test"]

debian-bookworm-full-warnings:
  <<: *compiler-warning-template
  needs: ["debian-bookworm-full-build-and-test"]

debian-bookworm-full-avx2-warnings:
  <<: *compiler-warning-template
  needs: ["debian-bookworm-full-avx2-build-and-test"]

debian-bookworm-full-avx512-warnings:
  <<: *compiler-warning-template
  needs: ["debian-bookworm-full-avx512-build-and-test"]

debian-bookworm-full-clang15-warnings:
  <<: *compiler-warning-template
  needs: ["debian-bookworm-full-clang15-build-and-test"]

debian-bullseye-default-warnings:
  <<: *compiler-warning-template
  needs: ["debian-bullseye-default-build-and-test"]

debian-bullseye-full-warnings:
  <<: *compiler-warning-template
  needs: ["debian-bullseye-full-build-and-test"]

debian-bullseye-full-avx2-warnings:
  <<: *compiler-warning-template
  needs: ["debian-bullseye-full-avx2-build-and-test"]

debian-bullseye-full-avx512-warnings:
  <<: *compiler-warning-template
  needs: ["debian-bullseye-full-avx512-build-and-test"]

debian-bullseye-performance-warnings:
  <<: *compiler-warning-template
  needs: ["debian-bullseye-performance-build-and-test"]

# CODE FORMATTING
debian-bullseye-clang-format:
  <<: *clang-format-template
  needs: []

## CLANG-TIDY
debian-bullseye-clang-tidy:
  <<: *clang-tidy-template
  image: $CI_REGISTRY_IMAGE:env-debian-bullseye-full
  needs: ["debian-bullseye-full-build-env"]

debian-bullseye-header-format:
  <<: *header-format-template
  needs: []

debian-bullseye-xml-format:
  <<: *xml-format-template
  needs: []

# DOCUMENTATION
debian-bookworm-documentation-build-env:
  <<: *execution-conditions
  image: docker:19.03.6
  stage: build-env-full
  script:
    - export IMAGE=$CI_REGISTRY_IMAGE:env-documentation
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - sed -e "s %%BASE_IMAGE%% $CI_REGISTRY_IMAGE g" docker/nektar-env/Dockerfile_debian_documentation > Dockerfile
    - docker pull $IMAGE || true
    - docker build --pull -t $IMAGE .
    - docker push $IMAGE
  needs: ["debian-bookworm-default-build-env"]

.build-documentation-template: &build-documentation-template
  <<: *build-and-test-template
  image: $CI_REGISTRY_IMAGE:env-documentation
  needs: ["debian-bookworm-documentation-build-env"]

user-guide-build:
  <<: *build-documentation-template
  script:
    - cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=Release -DNEKTAR_BUILD_LIBRARY:BOOL=OFF -DNEKTAR_BUILD_SOLVERS:BOOL=OFF -DNEKTAR_BUILD_UTILITIES:BOOL=OFF -DNEKTAR_BUILD_TESTS:BOOL=OFF -DNEKTAR_BUILD_DOC:BOOL=ON .
    - make -C build -j 4 user-guide-pdf user-guide-html developer-guide-pdf developer-guide-html
  artifacts:
    paths:
      - build/docs/user-guide/user-guide.pdf
      - build/docs/user-guide/html
      - build/docs/developer-guide/developers-guide.pdf
      - build/docs/developer-guide/html

doxygen-build:
  <<: *build-documentation-template
  script:
    - cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=Release -DNEKTAR_BUILD_LIBRARY:BOOL=OFF -DNEKTAR_BUILD_SOLVERS:BOOL=OFF -DNEKTAR_BUILD_UTILITIES:BOOL=OFF -DNEKTAR_BUILD_TESTS:BOOL=OFF -DNEKTAR_BUILD_DOC:BOOL=ON .
    - make -C build doc
  artifacts:
    paths:
      - build/docs/doxygen/html/

tutorials-build:
  <<: *build-documentation-template
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=Release .
    - make -C build -j 2 tutorials-pdf tutorials-html
  artifacts:
    paths:
      - build/docs/tutorial/

################################################
###################  UBUNTU  ###################
################################################

.build-env-ubuntu-template-default: &build-env-ubuntu-template-default
  <<: *build-env-template
  stage: build-env-default

.build-env-ubuntu-template-full: &build-env-ubuntu-template-full
  <<: *build-env-ubuntu-template-default
  stage: build-env-full

ubuntu-noble-default-build-env:
  <<: *build-env-ubuntu-template-default

ubuntu-noble-full-build-env:
  <<: *build-env-ubuntu-template-full
  needs: ["ubuntu-noble-default-build-env"]
  variables:
    PIP_FLAGS: "--break-system-packages"

ubuntu-jammy-default-build-env:
  <<: *build-env-ubuntu-template-default

ubuntu-jammy-full-build-env:
  <<: *build-env-ubuntu-template-full
  needs: ["ubuntu-jammy-default-build-env"]

ubuntu-focal-default-build-env:
  <<: *build-env-ubuntu-template-default

ubuntu-focal-full-build-env:
  <<: *build-env-ubuntu-template-full
  needs: ["ubuntu-focal-default-build-env"]

ubuntu-jammy-default-build-and-test:
  <<: *build-and-test-template
  needs: ["ubuntu-jammy-default-build-env"]

ubuntu-jammy-full-build-and-test:
  <<: *build-and-test-template
  needs: ["ubuntu-focal-full-build-env"]

ubuntu-focal-default-build-and-test:
  <<: *build-and-test-template
  needs: ["ubuntu-focal-default-build-env"]

ubuntu-focal-full-build-and-test:
  <<: *build-and-test-template
  needs: ["ubuntu-focal-full-build-env"]

ubuntu-noble-default-build-and-test:
  <<: *build-and-test-template
  needs: ["ubuntu-noble-default-build-env"]

ubuntu-noble-full-build-and-test:
  <<: *build-and-test-template
  needs: ["ubuntu-noble-full-build-env"]

ubuntu-noble-full-clang18-build-and-test:
  <<: *build-and-test-template
  needs: ["ubuntu-noble-full-build-env"]
  variables:
    BUILD_CC: clang-18
    BUILD_CXX: clang++-18

ubuntu-noble-full-clang18-avx2-build-and-test:
  <<: *build-and-test-template
  needs: ["ubuntu-noble-full-build-env"]
  variables:
    BUILD_CC: clang-18
    BUILD_CXX: clang++-18
    BUILD_SIMD: avx2
  tags:
    - avx2

ubuntu-noble-full-clang18-avx512-build-and-test:
  <<: *build-and-test-template
  needs: ["ubuntu-noble-full-build-env"]
  variables:
    BUILD_CC: clang-18
    BUILD_CXX: clang++-18
    BUILD_SIMD: avx512
  tags:
    - avx512

ubuntu-jammy-full-avx512-coverage:
  <<: *build-and-test-template
  needs: ["ubuntu-jammy-full-build-env"]
  coverage: /^\s*lines\.+:\s*(\d+\.\d+\%)/
  variables:
    BUILD_SIMD: avx512
    DO_COVERAGE: 1
  tags:
    - avx512
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-*.xml

ubuntu-jammy-default-warnings:
  <<: *compiler-warning-template
  needs: ["ubuntu-jammy-default-build-and-test"]

ubuntu-jammy-full-warnings:
  <<: *compiler-warning-template
  needs: ["ubuntu-jammy-full-build-and-test"]

ubuntu-focal-default-warnings:
  <<: *compiler-warning-template
  needs: ["ubuntu-focal-default-build-and-test"]

ubuntu-focal-full-warnings:
  <<: *compiler-warning-template
  needs: ["ubuntu-focal-full-build-and-test"]

ubuntu-noble-default-warnings:
  <<: *compiler-warning-template
  needs: ["ubuntu-noble-default-build-and-test"]

ubuntu-noble-full-warnings:
  <<: *compiler-warning-template
  needs: ["ubuntu-noble-full-build-and-test"]

ubuntu-noble-full-clang18-warnings:
  <<: *compiler-warning-template
  needs: ["ubuntu-noble-full-clang18-build-and-test"]

ubuntu-noble-full-clang18-avx2-warnings:
  <<: *compiler-warning-template
  needs: ["ubuntu-noble-full-clang18-avx2-build-and-test"]

ubuntu-noble-full-clang18-avx512-warnings:
  <<: *compiler-warning-template
  needs: ["ubuntu-noble-full-clang18-avx512-build-and-test"]


## UNCOMPILED FILES
ubuntu-noble-uncompiled-files:
  <<: *uncompiled-files-template
  image: $CI_REGISTRY_IMAGE:env-ubuntu-noble-full
  needs: ["ubuntu-noble-full-build-env"]
  
################################################
###################  FEDORA  ###################
################################################

.build-env-fedora-template-default: &build-env-fedora-template-default
  <<: *build-env-template
  stage: build-env-default

.build-env-fedora-template-full: &build-env-fedora-template-full
  <<: *build-env-fedora-template-default
  stage: build-env-full

fedora-40-default-build-env:
  <<: *build-env-fedora-template-default

fedora-40-full-build-env:
  <<: *build-env-fedora-template-full
  needs: ["fedora-40-default-build-env"]

#fedora-41-default-build-env:
#  <<: *build-env-fedora-template-default

#fedora-41-full-build-env:
#  <<: *build-env-fedora-template-full
#  needs: ["fedora-41-default-build-env"]

fedora-40-default-build-and-test:
  <<: *build-and-test-template
  needs: ["fedora-40-default-build-env"]

fedora-40-full-build-and-test:
  <<: *build-and-test-template
  needs: ["fedora-40-full-build-env"]
  variables:
    DISABLE_CWIPI: true

#fedora-41-default-build-and-test:
#  <<: *build-and-test-template
#  needs: ["fedora-41-default-build-env"]

#fedora-41-full-build-and-test:
#  <<: *build-and-test-template
#  needs: ["fedora-41-full-build-env"]

# COMPILER WARNINGS
fedora-40-default-warnings:
  <<: *compiler-warning-template
  needs: ["fedora-40-default-build-and-test"]

fedora-40-full-warnings:
  <<: *compiler-warning-template
  needs: ["fedora-40-full-build-and-test"]

#fedora-41-default-warnings:
#  <<: *compiler-warning-template
#  needs: ["fedora-41-default-build-and-test"]

#fedora-41-full-warnings:
#  <<: *compiler-warning-template
#  needs: ["fedora-41-full-build-and-test"]

# ################################################
# ###################  macOS  ####################
# ################################################

.build-and-test-macos-template: &build-and-test-macos-template
  <<: *build-and-test-template
  tags:
    - macos
  script:
    - mkdir -p log
    - export OS_VERSION="macos"
    - export NUM_CPUS=8
    - bash -x ./.gitlab-ci/build-and-test.sh |
      tee log/${OS_VERSION}_${BUILD_TYPE}.log

# ARM runners
macos-default-arm-build-and-test:
  <<: *build-and-test-macos-template
  tags:
    - macos-arm
  variables:
    BUILD_TYPE: "default"
  needs: []

macos-full-arm-build-and-test:
  <<: *build-and-test-macos-template
  tags:
    - macos-arm
  variables:
    BUILD_TYPE: "full"
    PYTHON_EXECUTABLE: /opt/local/bin/python
  needs: []

macos-default-arm-warnings:
  <<: *compiler-warning-template
  needs: ["macos-default-arm-build-and-test"]

macos-full-arm-warnings:
  <<: *compiler-warning-template
  needs: ["macos-full-arm-build-and-test"]


# ################################################
# #################  WINDOWS  ####################
# ################################################

win10-default-build-and-test:
  <<: *build-and-test-template
  tags:
    - win10
  script:
    - $Env:path = "$CI_PROJECT_DIR\build\dist\bin;$CI_PROJECT_DIR\ThirdParty;$CI_PROJECT_DIR\build\ThirdParty\dist\bin;" + $Env:path
    - echo $Env:path
    - mkdir build
    - cd build
    - cmake.exe -DCMAKE_BUILD_TYPE=Debug ..
    - cmake.exe --build . --target ALL_BUILD
    - cmake.exe --build . --target INSTALL
    - ctest --output-on-failure -C Debug -j8
  after_script:
    # This script identifies any orphan Tester-g processes still running
    # and terminates them (and their children recursively), to ensure the build
    # files can then be removed.
    #
    # The function Kill-ProcessTree gets all the processes (Get-CimInstance
    # Win32_Process) and selects those which have $ppid as their parent. It
    # recursively calls Kill-ProcessTree on them to kill their children. It
    # finally kills the process itself.
    #
    # The script below identifies all orphaned Tester-g processes and calls
    # Kill-ProcessTree to kill each of them. It then removes the source and
    # build trees to maximise space on the runner in light of multiple forks.
    - function Kill-ProcessTree {
        Param([int]$ppid)
        Get-CimInstance Win32_Process | Where-Object {
          $_.ParentProcessId -eq $ppid 
        } | ForEach-Object { 
          Kill-ProcessTree $_.ProcessId
        }
        Stop-Process -Id $ppid -Force
      };
      $tester = Get-Process Tester-g -ErrorAction SilentlyContinue ;
      if ($tester) {
        Kill-ProcessTree $tester.Id
        Sleep 5
      } ;
      Remove-Item -Force -Recurse *
  needs: []
  artifacts:
  timeout: 4h

win10-mpi-default-build-and-test:
  <<: *build-and-test-template
  tags:
    - win10
  script:
    - $Env:path = "$CI_PROJECT_DIR\build\dist\bin;$CI_PROJECT_DIR\ThirdParty;$CI_PROJECT_DIR\build\ThirdParty\dist\bin;" + $Env:path
    - echo $Env:path
    - mkdir build
    - cd build
    - cmake.exe -DCMAKE_BUILD_TYPE=Debug -DNEKTAR_USE_MPI=ON ..
    - cmake.exe --build . --target ALL_BUILD
    - cmake.exe --build . --target INSTALL
    - ctest --output-on-failure -C Debug -j8
  after_script:
    # This script identifies any orphan Tester-g processes still running
    # and terminates them (and their children recursively), to ensure the build
    # files can then be removed.
    #
    # The function Kill-ProcessTree gets all the processes (Get-CimInstance
    # Win32_Process) and selects those which have $ppid as their parent. It
    # recursively calls Kill-ProcessTree on them to kill their children. It
    # finally kills the process itself.
    #
    # The script below identifies all orphaned Tester-g processes and calls
    # Kill-ProcessTree to kill each of them. It then removes the source and
    # build trees to maximise space on the runner in light of multiple forks.
    - function Kill-ProcessTree {
        Param([int]$ppid)
        Get-CimInstance Win32_Process | Where-Object {
          $_.ParentProcessId -eq $ppid
        } | ForEach-Object {
          Kill-ProcessTree $_.ProcessId
        }
        Stop-Process -Id $ppid -Force
      };
      $tester = Get-Process Tester-g -ErrorAction SilentlyContinue ;
      if ($tester) {
        Kill-ProcessTree $tester.Id
        Sleep 5
      } ;
      Remove-Item -Force -Recurse *
  needs: []
  artifacts:
  timeout: 4h

##################################################
#################  DOCKERHUB  ####################
##################################################

# Docker Hub build template. We build images and push them into the gitlab
# container registry first; this way, we can test the images before they are
# deployed, modify images or test adjustments to the CI by using docker/*
# branches on gitlab, and test the images before they are deployed.
#
# Images are tagged with both :latest and the short SHA commit, so that the
# correct image version can be grabbed from the container registry.
.dockerhub_build_template: &dockerhub_build_template
  <<: *execution-conditions
  image: docker:stable
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - IMAGE=$CI_REGISTRY_IMAGE/${image_name}
    - docker pull $IMAGE || true
    - docker build ${args} --pull -t $IMAGE -f ${dockerfile} .
    - docker tag $IMAGE $IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $IMAGE $IMAGE:latest
    - docker push $IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $IMAGE:latest

# Docker Hub test template, which runs an image from the gitlab container
# registry on a particular SHA commit.
.dockerhub-test-template: &dockerhub_test_template
  <<: *execution-conditions
  image: ${CI_REGISTRY_IMAGE}/${image_name}:$CI_COMMIT_SHORT_SHA
  stage: package-test
  script:
    - mpirun -n 3 IncNavierStokesSolver $CI_PROJECT_DIR/solvers/IncNavierStokesSolver/Tests/ChanFlow_m3_par.xml
    - test_output=`IncNavierStokesSolver $CI_PROJECT_DIR/solvers/IncNavierStokesSolver/Tests/ChanFlow_m3_par.xml | grep "L 2 error (variable u)" | awk '{print ($7 < 1e-7)}'`
    - if [ "$test_output" -eq 0 ]; then echo "Tolerance test failed on parallel IncNavierStokesSolver run"; exit 1; fi
    - cd $CI_PROJECT_DIR/library/Demos/Python/MultiRegions
    - mpirun -n 2 python3 Helmholtz2D.py ../../MultiRegions/Tests/Helmholtz2D_P7.xml
    - test_output=`mpirun -n 2 python3 Helmholtz2D.py ../../MultiRegions/Tests/Helmholtz2D_P7.xml | grep "L 2 error (variable nek)" | awk '{print ($7 < 1e-4)}'`
    - if [ "$test_output" -eq 0 ]; then echo "Tolerance test failed on parallel Python run"; exit 1; fi

# Docker Hub deployment template. Only builds for master or tags on the main
# Nektar repository. The strategy is to login to the container registry and pull
# an image onto the runner; we then tag the image as appropriate (with :latest
# and SHA commit, as well as the git tag if this happens to be a tagged commit),
# then push the image up to Docker Hub. Note that cleanup of images on the
# runners can be difficult if they are tagged multiple times, so we also perform
# a quick rmi to make sure we only keep the images from the registry.
.dockerhub-deploy-template: &dockerhub_deploy_template
  image: docker:stable
  stage: package-deploy
  only:
    refs:
      - master@nektar/nektar
      - tags@nektar/nektar
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - CI_IMAGE=$CI_REGISTRY_IMAGE/${image_name}:$CI_COMMIT_SHORT_SHA
    - DH_IMAGE=${DOCKERIO_REGISTRY}/nektarpp/${image_name}
    - docker pull $CI_IMAGE
    - docker logout
    - docker login -u "$DOCKERIO_REGISTRY_USER" -p "$DOCKERIO_REGISTRY_PASSWORD" $DOCKERIO_REGISTRY
    - if [ ! -z $CI_COMMIT_TAG ]; then docker tag $CI_IMAGE $DH_IMAGE:$CI_COMMIT_TAG; docker push $DH_IMAGE:$CI_COMMIT_TAG; docker rmi $DH_IMAGE:$CI_COMMIT_TAG; fi
    - docker tag $CI_IMAGE $DH_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_IMAGE $DH_IMAGE:latest
    - docker push $DH_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $DH_IMAGE:latest
    - docker rmi $DH_IMAGE:$CI_COMMIT_SHORT_SHA $DH_IMAGE:latest
    - docker rmi $CI_IMAGE

# This cleans up the local temporary image if not deploying
.dockerhub-cleanup-template: &dockerhub_cleanup_template
  <<: *execution-conditions
  image: docker:stable
  stage: cleanup
#  except:
#    refs:
#      - master@nektar/nektar
#      - tags@nektar/nektar
  script:
    - CI_IMAGE=$CI_REGISTRY_IMAGE/${image_name}:$CI_COMMIT_SHORT_SHA
    - apk update
    - apk add curl
    - curl --fail-with-body --location "https://www.nektar.info/thirdparty/regctl" > /usr/bin/regctl
    - chmod 755 /usr/bin/regctl
    - regctl registry login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
    - regctl tag rm $CI_IMAGE

# Docker pushrm template: used to automatically deploy the README.md files to
# the Dockerhub description of each image.
.dockerhub-pushrm-template:
  image:
    name: chko/docker-pushrm
    entrypoint: ["/bin/sh", "-c", "/docker-pushrm"]
  stage: package-deploy
  only:
    refs:
      - master@nektar/nektar
      - tags@nektar/nektar
  variables:
    DOCKER_USER: $DOCKERIO_REGISTRY_USER
    DOCKER_PASS: $DOCKERIO_REGISTRY_PASSWORD
    PUSHRM_SHORT: ${short_description}
    PUSHRM_FILE: $CI_PROJECT_DIR/docker/${image_name}/README.md
    PUSHRM_TARGET: docker.io/nektarpp/${image_name}
    PUSHRM_DEBUG: 1
  script: "/bin/true"

# nektarpp/nektar-env image
dockerhub-build-env:
  <<: *dockerhub_build_template
  stage: package-env
  needs: []
  variables:
    image_name: nektar-env
    dockerfile: docker/nektar-env/Dockerfile_dockerhub

# nektarpp/nektar image
dockerhub-build-nektar:
  <<: *dockerhub_build_template
  stage: package-build
  needs: [ "dockerhub-build-env" ]
  variables:
    image_name: nektar
    dockerfile: docker/nektar/Dockerfile
    args: --build-arg ENV_IMAGE=$CI_REGISTRY_IMAGE/nektar-env:$CI_COMMIT_SHORT_SHA
    GIT_SUBMODULE_STRATEGY: normal

# nektarpp/nekmesh image
dockerhub-build-nekmesh:
  <<: *dockerhub_build_template
  stage: package-build
  needs: [ "dockerhub-build-env" ]
  variables:
    image_name: nekmesh
    dockerfile: docker/nekmesh/Dockerfile
    args: --build-arg ENV_IMAGE=$CI_REGISTRY_IMAGE/nektar-env:$CI_COMMIT_SHORT_SHA

# nektarpp/nektar-workbook image
dockerhub-build-workbook:
  <<: *dockerhub_build_template
  stage: package-build
  needs: []
  variables:
    image_name: nektar-workbook
    dockerfile: docker/nektar-workbook/Dockerfile

# nektarpp/nektar-dev image
dockerhub-build-dev:
  <<: *dockerhub_build_template
  stage: package-build
  needs: [ "dockerhub-build-nektar" ]
  variables:
    image_name: nektar-dev
    args: --build-arg ENV_IMAGE=$CI_REGISTRY_IMAGE/nektar-env:$CI_COMMIT_SHORT_SHA --build-arg NEKTAR_IMAGE=$CI_REGISTRY_IMAGE/nektar:$CI_COMMIT_SHORT_SHA
    dockerfile: docker/nektar-dev/Dockerfile

# Test the dockerhub images: runs a quick solve and Python code.
dockerhub-test-nektar:
  <<: *dockerhub_test_template
  needs: [ "dockerhub-build-nektar" ]
  variables:
    image_name: nektar

dockerhub-test-nektar-dev:
  <<: *dockerhub_test_template
  needs: [ "dockerhub-build-dev" ]
  variables:
    image_name: nektar-dev
  script:
    - cd $CI_PROJECT_DIR/templates/executable
    - ./test.sh /usr/local/lib64/nektar++/cmake 3 /usr/bin/cmake

# For NekMesh, test that a simple conversion works
dockerhub-test-nekmesh:
  <<: *execution-conditions
  needs: [ "dockerhub-build-nekmesh" ]
  image: ${CI_REGISTRY_IMAGE}/nekmesh:$CI_COMMIT_SHORT_SHA
  stage: package-test
  script:
    - cd $CI_PROJECT_DIR/utilities/NekMesh/Tests/MeshGen/STEP
    - NekMesh -v -m jac:list 3d_bl_cyl.mcf 3d_bl_cyl-out.xml

dockerhub-test-workbook:
  <<: *dockerhub_test_template
  needs: [ "dockerhub-build-workbook" ]
  variables:
    image_name: nektar-workbook

# Deployment
dockerhub-deploy-nektar:
  <<: *dockerhub_deploy_template
  needs: [ "dockerhub-test-nektar" ]
  variables:
    image_name: nektar
dockerhub-pushrm-nektar:
  extends: .dockerhub-pushrm-template
  needs: [ "dockerhub-deploy-nektar" ]
  variables:
    image_name: nektar
    short_description: Full Nektar++ installation using Debian 12 image.

dockerhub-deploy-nektar-env:
  <<: *dockerhub_deploy_template
  needs: [ "dockerhub-build-env" ]
  variables:
    image_name: nektar-env
dockerhub-pushrm-nektar-env:
  extends: .dockerhub-pushrm-template
  needs: [ "dockerhub-deploy-nektar-env" ]
  variables:
    image_name: nektar-env
    short_description: Nektar++ build environment image.

dockerhub-deploy-nektar-dev:
  <<: *dockerhub_deploy_template
  needs: [ "dockerhub-test-nektar-dev" ]
  variables:
    image_name: nektar-dev
dockerhub-pushrm-nektar-dev:
  extends: .dockerhub-pushrm-template
  needs: [ "dockerhub-deploy-nektar-dev" ]
  variables:
    image_name: nektar-dev
    short_description: Development environment for Nektar++.

dockerhub-deploy-nektar-workbook:
  <<: *dockerhub_deploy_template
  needs: [ "dockerhub-build-workbook" ]
  variables:
    image_name: nektar-workbook
dockerhub-pushrm-nektar-workbook:
  extends: .dockerhub-pushrm-template
  needs: [ "dockerhub-deploy-nektar-workbook" ]
  variables:
    image_name: nektar-workbook
    short_description: Nektar++ Jupyter workbook image based on scipy-workbook.

dockerhub-deploy-nekmesh:
  <<: *dockerhub_deploy_template
  needs: [ "dockerhub-build-nekmesh" ]
  variables:
    image_name: nekmesh
dockerhub-pushrm-nekmesh:
  extends: .dockerhub-pushrm-template
  needs: [ "dockerhub-deploy-nekmesh" ]
  variables:
    image_name: nekmesh
    short_description: Image for the high-order mesh generator NekMesh.

# Cleanup (if not deploying)
dockerhub-cleanup-nekmesh:
  <<: *dockerhub_cleanup_template
  needs: 
    - job: dockerhub-build-nekmesh
    - job: dockerhub-deploy-nekmesh
      optional: true
  variables:
    image_name: nekmesh

dockerhub-cleanup-workbook:
  <<: *dockerhub_cleanup_template
  needs:
    - job: dockerhub-build-workbook
    - job: dockerhub-deploy-nektar-workbook
      optional: true
  variables:
    image_name: nektar-workbook

dockerhub-cleanup-nektar-dev:
  <<: *dockerhub_cleanup_template
  needs:
    - job: dockerhub-test-nektar-dev
    - job: dockerhub-deploy-nektar-dev
      optional: true
  variables:
    image_name: nektar-dev

dockerhub-cleanup-nektar:
  <<: *dockerhub_cleanup_template
  needs: 
    - job: dockerhub-test-nektar
    - job: dockerhub-cleanup-nektar-dev
    - job: dockerhub-deploy-nektar
      optional: true
  variables:
    image_name: nektar

dockerhub-cleanup-nektar-env:
  <<: *dockerhub_cleanup_template
  needs: 
    - job: dockerhub-cleanup-nektar
    - job: dockerhub-cleanup-nektar-dev
    - job: dockerhub-cleanup-nekmesh
    - job: dockerhub-deploy-nektar-env
      optional: true
  variables:
    image_name: nektar-env
